// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name RazorpayTurboUPI_MockBankSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreTelephony
import Foundation
import MetricKit
import MockBankSDK
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public struct CustomerFeeBearerData : Swift.Codable {
  public let input: RazorpayTurboUPI_MockBankSDK.CFBInput
  public var consent: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CFBDisplay : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CFBInput : Swift.Codable {
  public let amount: Swift.Int
  public let currency: Swift.String, contact: Swift.String, email: Swift.String, method: Swift.String
  public let upi: RazorpayTurboUPI_MockBankSDK.Upi
  public let fee: Swift.Int, tax: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VPADetails : Swift.Codable {
  public let id: Swift.String?
  public let address: Swift.String?
  public let handle: Swift.String?
  public let username: Swift.String?
  public let name: Swift.String?
  public let account: RazorpayTurboUPI_MockBankSDK.BankAccount?
  public let active: Swift.Bool?
  public let validated: Swift.Bool?
  public let verified: Swift.Bool?
  public let isDefault: Swift.Bool?
  public let createdAt: Swift.Int?
  public let deletedAt: Swift.Double?
  public var isPrimary: Swift.Bool?
  public init(entity: Swift.String?, id: Swift.String?, address: Swift.String?, handle: Swift.String?, username: Swift.String?, name: Swift.String?, account: RazorpayTurboUPI_MockBankSDK.BankAccount?, active: Swift.Bool?, validated: Swift.Bool?, verified: Swift.Bool?, isDefault: Swift.Bool?, createdAt: Swift.Int?, deletedAt: Swift.Double?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI_MockBankSDK.VPADetails {
  public static func createDefaultVPA(bankAccount: RazorpayTurboUPI_MockBankSDK.BankAccount, _ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.VPADetails]>)
  public static func createVPA(address: Swift.String, bankAccount: RazorpayTurboUPI_MockBankSDK.BankAccount, _ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.VPADetails]>)
  public static func getVPAList(deletedVPA: Swift.Bool = false, handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.VPADetails]>)
  public func delinkVpa(_ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.VPADetails>)
}
public struct AccountBalance : Swift.Codable {
  public let balance: Swift.Int?
  public let currency: Swift.String?
  public let id: Swift.String?
  public let accountType: Swift.String?
  public let outstanding: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class InitiateVerification {
  public init()
  public func initiateVerification(_ location: Swift.String?, completion: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.VPADetails]>, progress: ((Swift.String) -> Swift.Void)?)
  @objc deinit
}
public enum TransactionType : Swift.String, Swift.Codable {
  case collect
  case pay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionStatus : Swift.String, Swift.Codable {
  case pending
  case failed
  case success
  case expired
  case completed
  case created
  case rejected
  case initiated
  case requested
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionFlow : Swift.String, Swift.Codable {
  case credit
  case debit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Creds : Swift.Codable {
  public let upipin: RazorpayTurboUPI_MockBankSDK.AccountCredentials?
  public let sms: RazorpayTurboUPI_MockBankSDK.AccountCredentials?
  public let atmpin: RazorpayTurboUPI_MockBankSDK.AccountCredentials?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccountCredentials : Swift.Codable {
  public let length: Swift.Int?
  public let isSet: Swift.Bool?
  public init(length: Swift.Int?, isSet: Swift.Bool?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Upi : Swift.Codable {
  public let rrn: Swift.String?
  public let refId: Swift.String?
  public let refUrl: Swift.String?
  public let mcc: Swift.String?
  public let networkTransactionId: Swift.String?
  public let gatewayErrorCode: Swift.String?
  public let gatewayErrorDescription: Swift.String?
  public let createdAt: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Transaction : Swift.Codable {
  public let id: Swift.String?
  public let type: RazorpayTurboUPI_MockBankSDK.TransactionType?
  public let flow: RazorpayTurboUPI_MockBankSDK.TransactionFlow?
  public let amount: Swift.Int?
  public let currency: Swift.String?
  public let description: Swift.String?
  public let status: RazorpayTurboUPI_MockBankSDK.TransactionStatus?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let isConcernEligible: Swift.Bool?
  public let isPendingCollect: Swift.Bool?
  public let initiatedAt: Swift.Double?
  public let expireAt: Swift.Double?
  public let completedAt: Swift.Double?
  public let createdAt: Swift.Double?
  public var payer: RazorpayTurboUPI_MockBankSDK.Beneficiary?
  public var payee: RazorpayTurboUPI_MockBankSDK.Beneficiary?
  public let bankAccount: RazorpayTurboUPI_MockBankSDK.BankAccount?
  public let upi: RazorpayTurboUPI_MockBankSDK.Upi?
  public let gatewayDescripiton: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
public class MetricKitManager : ObjectiveC.NSObject {
  public static let shared: RazorpayTurboUPI_MockBankSDK.MetricKitManager
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
extension RazorpayTurboUPI_MockBankSDK.MetricKitManager : MetricKit.MXMetricManagerSubscriber {
  @objc dynamic public func didReceive(_ payloads: [MetricKit.MXMetricPayload])
  @available(iOS 14.0, *)
  @objc dynamic public func didReceive(_ payloads: [MetricKit.MXDiagnosticPayload])
}
public struct PayRequest {
  public enum Source : Swift.String {
    case scan
    case intent
    case p2p
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let amount: Swift.String
  public let currency: Swift.String
  public let description: Swift.String?
  public let beneficiary: RazorpayTurboUPI_MockBankSDK.Beneficiary?
  public let vpa: RazorpayTurboUPI_MockBankSDK.VPADetails?
  public let source: RazorpayTurboUPI_MockBankSDK.PayRequest.Source?
  public let merchantCategory: Swift.String?
  public let url: Swift.String?
  public let transactionId: Swift.String?
  public var additionalDetail: [Swift.String : Any]?
  public init(amount: Swift.String, currency: Swift.String, description: Swift.String?, beneficiary: RazorpayTurboUPI_MockBankSDK.Beneficiary? = nil, vpa: RazorpayTurboUPI_MockBankSDK.VPADetails? = nil, source: RazorpayTurboUPI_MockBankSDK.PayRequest.Source? = nil, merchantCategory: Swift.String? = nil, url: Swift.String? = nil, transactionId: Swift.String? = nil, additionalDetail: [Swift.String : Any]? = nil)
}
public class TransactionsAPI {
  public init()
  @objc deinit
}
public struct Card {
  public let expiryMonth: Swift.String
  public let expiryYear: Swift.String
  public let lastSixDigits: Swift.String
  public init(expiryMonth: Swift.String, expiryYear: Swift.String, lastSixDigits: Swift.String)
}
extension Swift.Decodable {
  public init(from: Any) throws
}
extension Swift.Encodable {
  public func toJSONString() -> Swift.String?
  public var dictionary: [Swift.String : Any]? {
    get
  }
}
public typealias moneyHandler = RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.Transaction>
@_hasMissingDesignatedInitializers public class CustomerFeeBearerAPI {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SDKPreferencesAPI {
  @objc deinit
}
public enum UpiState : Swift.String {
  case notRegistered
  case registered
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class RazorpayUpi {
  public var vpa: RazorpayTurboUPI_MockBankSDK.VPADetails? {
    get
    set
  }
  public static var shared: RazorpayTurboUPI_MockBankSDK.RazorpayUpi? {
    get
  }
  public static var tpv: (any RazorpayTurboUPI_MockBankSDK.TPVProtocol)? {
    get
  }
  public static var bankSDKInitialised: Swift.Bool {
    get
  }
  public var state: RazorpayTurboUPI_MockBankSDK.UpiState {
    get
  }
  public static var isTpvFlow: Swift.Bool {
    get
  }
  @discardableResult
  public init?(keyId: Swift.String, sessionId: Swift.String, mobileNo: Swift.String, orderId: Swift.String?, customerId: Swift.String? = nil, callback: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<Swift.Bool>)
  @discardableResult
  public init?(keyId: Swift.String, sessionId: Swift.String, mobileNo: Swift.String, callback: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<Swift.Bool>)
  public var isDeviceBindCompleted: Swift.Bool {
    get
  }
  public func pay(payRequest: RazorpayTurboUPI_MockBankSDK.PayRequest, _ handler: @escaping RazorpayTurboUPI_MockBankSDK.moneyHandler)
  public func getPopularBanks() -> [RazorpayTurboUPI_MockBankSDK.PopularBanks]?
  public func getLinkedAccounts(_ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.VPADetails]>)
  public func getXPGService() -> Swift.String?
  public func getUserConsentAndCalculateFees(payRequest: [Swift.String : Any], _ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.CustomerFeeBearerData>)
  public var accentColorHexCode: Swift.String? {
    get
    set
  }
  @objc deinit
}
public typealias CallBack<T> = (T?, RazorpayTurboUPI_MockBankSDK.TurboSDKError?) -> Swift.Void
@_hasMissingDesignatedInitializers public class ErrorMappingsAPI {
  @objc deinit
}
public typealias BanksCompletionHandler = RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.Bank]>
public enum URLType : Swift.String, Swift.Codable {
  case bharat
  case upi
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class URLParsedObject : Swift.Codable {
  final public let vpa: Swift.String?
  final public let name: Swift.String?
  final public let remarks: Swift.String?
  final public let amount: Swift.Double?
  final public let currency: Swift.String?
  final public let minimumAmount: Swift.Double?
  final public let transactionId: Swift.String?
  final public let url: Swift.String?
  final public let accountNumber: Swift.String?
  final public let ifsc: Swift.String?
  final public let adhaarNumber: Swift.String?
  final public let qrType: RazorpayTurboUPI_MockBankSDK.URLType
  final public let merchantCategory: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class QRParser {
  public init()
  public func parseQR(_ stringToParse: Swift.String) -> Swift.Result<RazorpayTurboUPI_MockBankSDK.URLParsedObject, any Swift.Error>
  @objc deinit
}
public class ImageCacheAPI {
  public init()
  public func getImageDetails(url: Foundation.URL, _ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<Foundation.Data>)
  @objc deinit
}
public struct VPAAvailability : Swift.Codable {
  public let isAvailable: Swift.Bool?
  public let suggestions: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TurboSDKError {
  public var errorCode: Swift.String
  public var errorDescription: Swift.String
  public var errorReason: Swift.String?
  public var errorSource: Swift.String?
  public var errorStep: Swift.String?
  public var localizedDescription: Swift.String {
    get
  }
  public var asDictionary: [Swift.String : Any?] {
    get
  }
}
public enum BeneficiaryType : Swift.String, Swift.Codable {
  case all
  case vpa
  case account
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Beneficiary : Swift.Codable {
  public let validated: Swift.Bool?
  public let verified: Swift.Bool?
  public let type: RazorpayTurboUPI_MockBankSDK.BeneficiaryType?
  public let id: Swift.String?
  public let address: Swift.String?
  public let name: Swift.String?
  public var isBlocked: Swift.Bool?
  public var isSpammed: Swift.Bool?
  public let blockedAt: Swift.Double?
  public let username: Swift.String?
  public let handle: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Double {
  public func toIndianCurrencyFormat(maximumFractionDigits: Swift.Int = 0) -> Swift.String?
  public var clean: Swift.String {
    get
  }
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public class func validateAmountTextField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public class DeregisterAccountAPI {
  public init()
  public func deregisterAccount(_ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<Swift.Bool>)
  @objc deinit
}
extension Swift.String {
  public var isNotEmpty: Swift.Bool {
    get
  }
  public func index(from: Swift.Int) -> Swift.String.Index
  public func substring(from: Swift.Int) -> Swift.String
  public func substring(wit r: Swift.Range<Swift.Int>) -> Swift.String
  public var digits: Swift.String {
    get
  }
  public var isCountryCodeExist: Swift.Bool {
    get
  }
  public func trim() -> Swift.String
  public func parse<D>(to type: D.Type) -> D? where D : Swift.Decodable
}
@_hasMissingDesignatedInitializers public class DictionaryEncoder {
  public func encode<T>(_ value: T) throws -> [Swift.String : Any] where T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DictionaryDecoder {
  public func decode<T>(_ type: T.Type, from obj: Any) throws -> T where T : Swift.Decodable
  @objc deinit
}
extension UIKit.UIDevice {
  public enum UnsupportedDevices : Swift.String {
    case iPhone6
    case iphone5s
    case iPhone4s
    case iPhone4
    case iPhone5c
    case iPhone5
    case iPhone6Plus
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static func isValid() -> Swift.Result<Swift.Bool, any Swift.Error>
}
public struct BankAccount : Swift.Codable {
  public let id: Swift.String?
  public let ifsc: Swift.String?
  public let accountNumber: Swift.String?
  public let beneficiaryName: Swift.String?
  public let creds: RazorpayTurboUPI_MockBankSDK.Creds?
  public let type: Swift.String?
  public var bank: RazorpayTurboUPI_MockBankSDK.Bank?
  public let accountType: Swift.String?
  public var accountNumberLast4: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI_MockBankSDK.BankAccount {
  public func setupUpiPin(card: RazorpayTurboUPI_MockBankSDK.Card, handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.BankAccount>)
  public func resetUpiPin(card: RazorpayTurboUPI_MockBankSDK.Card, handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.BankAccount>)
  public func changeUpiPin(handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.BankAccount>)
}
extension RazorpayTurboUPI_MockBankSDK.BankAccount {
  public func getBalance(_ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<RazorpayTurboUPI_MockBankSDK.AccountBalance>)
}
public struct Bank : Swift.Codable {
  public let name: Swift.String?
  public let id: Swift.String?
  public let upiFormat: Swift.String?
  public let isActive: Swift.Bool?
  public let isUpiAvailable: Swift.Bool?
  public let ifsc: Swift.String?
  public let imageURL: Swift.String?
  public var displayName: Swift.String?
  public let bankLogoPlaceholder: Swift.String
  public var bankLogo: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI_MockBankSDK.Bank {
  public func getBankAccounts(_ handler: @escaping RazorpayTurboUPI_MockBankSDK.CallBack<[RazorpayTurboUPI_MockBankSDK.BankAccount]>)
}
extension RazorpayTurboUPI_MockBankSDK.Bank {
  public static func getBankList(_ handler: @escaping RazorpayTurboUPI_MockBankSDK.BanksCompletionHandler)
}
public protocol TPVProtocol : AnyObject {
}
extension os.OSLog {
  public static let defaultLogCatory: os.OSLog
}
public func printLog(_ items: Any..., log: os.OSLog = .defaultLogCatory, type: os.OSLogType = .debug, fileName: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
public struct PopularBanks : Swift.Codable {
  public var iin: Swift.String
  public var priority: Swift.String
  public var displayName: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TPVBankAccount : Swift.Codable {
  public var ifsc: Swift.String
  public var bankName: Swift.String?
  public var accountNumber: Swift.String
  public var bankLogo: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI_MockBankSDK.TransactionType : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionType : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionType : Swift.RawRepresentable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionStatus : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionStatus : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionStatus : Swift.RawRepresentable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionFlow : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionFlow : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.TransactionFlow : Swift.RawRepresentable {}
extension RazorpayTurboUPI_MockBankSDK.PayRequest.Source : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.PayRequest.Source : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.PayRequest.Source : Swift.RawRepresentable {}
extension RazorpayTurboUPI_MockBankSDK.UpiState : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.UpiState : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.UpiState : Swift.RawRepresentable {}
extension RazorpayTurboUPI_MockBankSDK.URLType : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.URLType : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.URLType : Swift.RawRepresentable {}
extension RazorpayTurboUPI_MockBankSDK.BeneficiaryType : Swift.Equatable {}
extension RazorpayTurboUPI_MockBankSDK.BeneficiaryType : Swift.Hashable {}
extension RazorpayTurboUPI_MockBankSDK.BeneficiaryType : Swift.RawRepresentable {}
extension UIKit.UIDevice.UnsupportedDevices : Swift.Equatable {}
extension UIKit.UIDevice.UnsupportedDevices : Swift.Hashable {}
extension UIKit.UIDevice.UnsupportedDevices : Swift.RawRepresentable {}
